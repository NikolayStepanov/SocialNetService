// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create": {
            "post": {
                "description": "Сreating a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "CreateUser",
                "parameters": [
                    {
                        "description": "json information user",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.UserCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrResponse"
                        }
                    }
                }
            }
        },
        "/friends/{user_id}": {
            "get": {
                "description": "Getting information about user's friends",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "GetAllFriendsByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.FriendsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrResponse"
                        }
                    }
                }
            }
        },
        "/make_friends": {
            "post": {
                "description": "Сreating a new city entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "MakeFriends",
                "parameters": [
                    {
                        "description": "json SourceID,TargetID make friends",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.MakeFriendsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrResponse"
                        }
                    }
                }
            }
        },
        "/user/": {
            "delete": {
                "description": "Delete user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "UserDelete",
                "parameters": [
                    {
                        "description": "json delete targetID User",
                        "name": "requestDelete",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.DeleteUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.DeleteUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrResponse"
                        }
                    }
                }
            }
        },
        "/{user_id}": {
            "get": {
                "description": "Getting information about the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "GetUserInformation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.UserInformationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "User information update",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "UpdateUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "json update information user",
                        "name": "updateUserRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/http.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/service.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.DeleteUserRequest": {
            "type": "object",
            "properties": {
                "target_id": {
                    "type": "string"
                }
            }
        },
        "http.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "http.FriendInformation": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.FriendsResponse": {
            "type": "object",
            "properties": {
                "friends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http.FriendInformation"
                    }
                }
            }
        },
        "http.MakeFriendsRequest": {
            "type": "object",
            "properties": {
                "source_id": {
                    "type": "string"
                },
                "target_id": {
                    "type": "string"
                }
            }
        },
        "http.UserCreateRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "string"
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.UserCreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "http.UserInformationResponse": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "friends": {
                    "$ref": "#/definitions/http.FriendsResponse"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "http.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "new age": {
                    "type": "string"
                },
                "new name": {
                    "type": "string"
                }
            }
        },
        "service.ErrResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "application-specific error code",
                    "type": "integer"
                },
                "error": {
                    "description": "application-level error message, for debugging",
                    "type": "string"
                },
                "status": {
                    "description": "user-level status message",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "SocialNet Service",
	Description:      "API Server for SocialNet Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
